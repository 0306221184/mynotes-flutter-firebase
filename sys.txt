@Flutter
{
    @Widgets
    {
        [
        AppBar(
            title: @Widget, // title of bar
            actions:[List<Widget>?], List Widget of the end of the bar
            leading: Widget?,// Widget before the title
            backgroundColor:Color?,//Sets the background color of the AppBar
            elevation: double?,//Controls the shadow below the AppBar.
            flexibleSpace:Widget?,//A widget that appears behind the title, actions, and leading widgets. Useful for creating custom app bars.
            bottom: PreferredSizeWidget?  A widget displayed at the bottom of the AppBar. Commonly used for TabBar.
            shape: ShapeBorder?,//RoundedRectangleBorder,BeveledRectangleBorder,ContinuousRectangleBorder
            toolbarHeight: double?,//Specifies the height of the AppBar.
            iconTheme: IconThemeData?,//Controls the color, opacity, and size of icons in the AppBar.
            titleTextStyle: TextStyle?,//Sets the style of the title text.
            systemOverlayStyle:SystemUiOverlayStyle?,//Configures the status bar icon brightness and background color.
            foregroundColor: Color?,//Sets the default color for text and icons in the AppBar.
            automaticallyImplyLeading: bool,//Determines whether to display the back button automatically
        ),
        PopupMenuButton<T>(
            onSelected: void Function(T value),
            itemBuilder: PopupMenuEntry<T> Function(BuildContext context),
            initialValue: T?,
            icon: Widget,
            onCanceled: VoidCallback?,
            elevation: double?,
            offset: Offset?,
            tooltip: String?,
            enableFeedback: bool,
            child: Widget,
            shape: ShapeBorder?,
        ),
        FutureBuilder(
            future: Future<T>?,//A Future whose result the builder function depends on.Null => ConnectionState.none.
            builder: AsyncWidgetBuilder<T>(BuildContext context, AsyncSnapshot<T> snapshot),//A required function that builds a widget based on the current state of the AsyncSnapshot
            initialData: T?,Optional initial data for the AsyncSnapshot.
            snapshot:[none,waiting,active,done,data,error]
        ),
        Text(
            data: String,
            style: TextStyle?,
            textAlign: TextAlign?,
            textDirection: TextDirection?,
            softWrap: bool?,//Whether the text should wrap to the next line if it exceeds its bounds.
            overflow: TextOverflow?,
            maxLines: int?,
            semanticsLabel: String?,
            locale: Locale?,
            strutStyle: StrutStyle?,Defines how vertical spacing (leading) should be applied to the text.
            textScaleFactor: double?,//Controls the scaling of the text relative to the system font size.
            key: Key?,
            textWidthBasis: TextWidthBasis?,Determines the width that the text should be constrained to when laying out.
            selectionColor: Color?,//The background color of the text when selected.
        ), // Displays a string of text
        Container(
            alignment: AlignmentGeometry?,//Aligns the child widget within the container.
            padding: EdgeInsetsGeometry?,//Adds padding inside the container, around the child.
            color: Color?,//Sets the background color of the container.
            decoration: Decoration?,//Adds decoration to the container, such as borders, rounded corners, or gradients.
            foregroundDecoration: Decoration?,//Adds a decoration in front of the child (like an overlay).
            width: double?,
            height: double?,
            constraints: BoxConstraints?,//Specifies constraints like minimum or maximum width/height.
            margin: EdgeInsetsGeometry?,
            transform: Matrix4?,//Applies a transformation to the container, such as scaling or rotation.
            transformAlignment: AlignmentGeometry?,//Sets the alignment for the transformation's origin.
            child: Widget?,
            clipBehavior: Clip,//Specifies how to clip the content of the container if it overflows.
        ),// A rectangular container for adding padding, margins, borders, and backgrounds
        Row( 
            children: List<Widget>,
            mainAxisAlignment: MainAxisAlignment,//Determines how the children are aligned along the horizontal (main) axis.
            crossAxisAlignment: CrossAxisAlignment,//Determines how the children are aligned along the vertical (cross) axis.
            mainAxisSize: MainAxisSize,//Determines how much space the Row should occupy along the horizontal axis.
            textDirection: TextDirection?,Sets the direction in which the children are laid out
            verticalDirection: VerticalDirection,//Determines the order in which the children are laid out vertically when CrossAxisAlignment is set to start or end
            textBaseline: TextBaseline?,Used with CrossAxisAlignment.baseline to align children along their text baselines.

        ),// Horizontal layout
        Column( 
            children: List<Widget>,
            mainAxisAlignment: MainAxisAlignment,//Determines how the children are aligned along the horizontal (main) axis.
            crossAxisAlignment: CrossAxisAlignment,//Determines how the children are aligned along the vertical (cross) axis.
            mainAxisSize: MainAxisSize,//Determines how much space the Row should occupy along the horizontal axis.
            textDirection: TextDirection?,Sets the direction in which the children are laid out
            verticalDirection: VerticalDirection,//Determines the order in which the children are laid out vertically when CrossAxisAlignment is set to start or end
            textBaseline: TextBaseline?,Used with CrossAxisAlignment.baseline to align children along their text baselines.
        ),// Vertical layout
        Scaffold(
            appBar: PreferredSizeWidget?,
            body: Widget?,
            floatingActionButton: Widget?,
            floatingActionButtonLocation: FloatingActionButtonLocation?,//Determines the position of the floatingActionButton.
            floatingActionButtonAnimator: FloatingActionButtonAnimator?,Controls the animation of the floatingActionButton when it is added, removed, or moved.
            persistentFooterButtons: List<Widget>?,//A set of buttons displayed at the bottom of the scaffold, above the bottom navigation or safe area.
            drawer: Widget?,//A navigation drawer displayed at the start of the screen.
            endDrawer: Widget?,//A navigation drawer displayed at the end of the screen.
            bottomNavigationBar: Widget?,//A widget displayed at the bottom of the scaffold, typically a BottomNavigationBar.
            bottomSheet: Widget?,//A widget displayed at the bottom of the scaffold that can be persistent or temporary.
            backgroundColor: Color?,The background color of the scaffold.
            resizeToAvoidBottomInset: bool?,//Controls whether the body resizes when the keyboard appears.
            primary: bool,//Whether the scaffold is the primary focus (e.g., affects the status bar).
            extendBody: bool,//Whether the body extends behind the app bar.
            extendBodyBehindAppBar: bool,//Whether the body extends behind the app bar.
            onDrawerChanged: ValueChanged<bool>?,
            onEndDrawerChanged: ValueChanged<bool>?,
            key: Key?
        ),
        Center,
        Container,
        TextButton,
        FloatingActionButton,
        Image,
        Icon,
        ListView,
        TextField,
        Padding,
        Align,
        Hero,
        GestureDetector,
        Drawer,
        SnackBar,
        MaterialPageRoute,
        SingleChildScrollView,
        TabBar,
        AlertDialog,
        ],
    },
    @Utils
    {
        ProgressIndicator:{
            LinearProgressIndicator,
            CircularProgressIndicator,
        },

    }
    @StateManagement
    {
        @StatefulWidget
        {
            `
            class MyWidget extends StatefulWidget {
                @override
                _MyWidgetState createState() => _MyWidgetState();
            }

            class _MyWidgetState extends State<MyWidget> {
                @override
                Widget build(BuildContext context) {
                    return Container();
                }
            }
            `
        },
        @Provider
        {
            ChangeNotifierProvider(
                create: (context) => YourNotifier(),
                child: YourApp(),
            );
        },
        @BlocPattern
        {
            BlocProvider(
                create: (context) => YourBloc(),
                child: YourApp(),
            );
        },
    },
    @Navigation
    {
        @NamedRoutes
        {
            `
            Navigator.pushNamed(context, '/routeName');
            `
        },
        @AnonymousRoutes
        {
            `
            Navigator.push(context, MaterialPageRoute(builder: (context) => YourPage()));
            `
        },
    },
    @Styling
    {
        @TextStyle
        {
            `
            Text(
                'Styled Text',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            );
            `
        },
        @Themes
        {
            `
            ThemeData(
                primaryColor: Colors.blue,
                accentColor: Colors.amber,
            );
            `
        },
    },
    @Networking
    {
        http.get(Uri.parse('https://api.example.com')),
        http.post(Uri.parse('https://api.example.com'), body: {'key': 'value'}),
    },
    @Database
    {
        sqflite.openDatabase('my_database.db'),
        FirebaseFirestore.instance.collection('users').get(),
    },
    @ErrorHandling
    {
        try {
            // Your code
        } catch (e) {
            print(e);
        }
    }
}
